basePath: /
definitions:
  handler.AuthResponse:
    properties:
      access_exp:
        type: string
      access_token:
        type: string
      refresh_exp:
        type: string
      refresh_token:
        type: string
    type: object
  handler.ClientTokenRequest:
    properties:
      audience:
        items:
          type: string
        type: array
      client_id:
        type: string
      client_secret:
        type: string
      scopes:
        items:
          type: string
        type: array
    required:
    - client_id
    - client_secret
    type: object
  handler.ClientTokenResponse:
    properties:
      access_exp:
        type: string
      access_token:
        type: string
    type: object
  handler.CreateRoleRequest:
    properties:
      desc:
        type: string
      key:
        type: string
    required:
    - desc
    - key
    type: object
  handler.CreateScopeRequest:
    properties:
      desc:
        type: string
      key:
        type: string
    required:
    - desc
    - key
    type: object
  handler.IntrospectRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  handler.IntrospectResponse:
    properties:
      active:
        type: boolean
      aud:
        items:
          type: string
        type: array
      email:
        type: string
      roles:
        items:
          type: string
        type: array
      scope:
        items:
          type: string
        type: array
      sub:
        type: string
      subject_type:
        type: string
    type: object
  handler.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: "123456"
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  handler.LogoutRequest:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  handler.RefreshRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  handler.RefreshResponse:
    properties:
      access_exp:
        type: string
      access_token:
        type: string
      refresh_exp:
        type: string
      refresh_token:
        type: string
    type: object
  handler.SignUpRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: "123456"
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  handler.grantUserScopeReq:
    properties:
      expires_at:
        type: string
      granted_by:
        type: string
      scope_id:
        type: string
    required:
    - granted_by
    - scope_id
    type: object
  handler.idsBody:
    properties:
      ids:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - ids
    type: object
  handler.revokeUserScopeReq:
    properties:
      scope_id:
        type: string
    required:
    - scope_id
    type: object
host: localhost:8080
info:
  contact:
    name: Yuri Garcia Ribeiro
    url: https://github.com/YuriGarciaRibeiro/auth-microservice-go
  description: Serviço de autenticação centralizado com JWT
  title: Auth Microservice API
  version: "1.0"
paths:
  /admin/clients/{clientId}/scopes:
    get:
      description: Returns scopes attached directly to the client (table client_scopes)
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      security:
      - BearerAuth: []
      summary: List client scopes
      tags:
      - Admin
    post:
      consumes:
      - application/json
      parameters:
      - description: Client ID
        in: path
        name: clientId
        required: true
        type: string
      - description: Scope IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.idsBody'
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Attach scopes to client
      tags:
      - Admin
  /admin/roles:
    get:
      description: Returns all roles (id, key, desc)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties:
                type: string
              type: object
            type: array
      security:
      - BearerAuth: []
      summary: List roles
      tags:
      - Admin
    post:
      consumes:
      - application/json
      parameters:
      - description: Role data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create role
      tags:
      - Admin
  /admin/roles/{roleId}/scopes:
    post:
      consumes:
      - application/json
      parameters:
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: string
      - description: Scope IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.idsBody'
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Attach scopes to role
      tags:
      - Admin
  /admin/scopes:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties:
                type: string
              type: object
            type: array
      security:
      - BearerAuth: []
      summary: List scopes
      tags:
      - Admin
    post:
      consumes:
      - application/json
      parameters:
      - description: Scope data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateScopeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create scope
      tags:
      - Admin
  /admin/users/{userId}/roles:
    get:
      description: Returns the role keys assigned to the user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      security:
      - BearerAuth: []
      summary: List user roles
      tags:
      - Admin
    post:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Role IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.idsBody'
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Attach roles to user
      tags:
      - Admin
  /admin/users/{userId}/scopes:
    get:
      description: 'Returns user''s effective permissions: roles and final scopes
        (roles ⊔ direct, non-expired)'
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List user effective scopes
      tags:
      - Admin
  /admin/users/{userId}/scopes/grant:
    post:
      consumes:
      - application/json
      description: Grants a scope directly to the user (optional expiration). Prefer
        roles; use direct scopes for exceptions.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Grant payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.grantUserScopeReq'
      responses:
        "204":
          description: No Content
        "400":
          description: bad request
          schema:
            type: string
        "409":
          description: conflict
          schema:
            type: string
        "422":
          description: validation failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Grant direct scope to user
      tags:
      - Admin
  /admin/users/{userId}/scopes/revoke:
    post:
      consumes:
      - application/json
      description: Removes a direct scope from the user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Revoke payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.revokeUserScopeReq'
      responses:
        "204":
          description: No Content
        "400":
          description: bad request
          schema:
            type: string
        "409":
          description: conflict
          schema:
            type: string
        "422":
          description: validation failed
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Revoke direct scope from user
      tags:
      - Admin
  /auth/introspect:
    post:
      consumes:
      - application/json
      description: Validates an access token and returns whether it's active along
        with principal info
      parameters:
      - description: Token to introspect
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.IntrospectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.IntrospectResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Introspect an access token
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user with email and password, returning a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticate a user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: 'Revokes the provided tokens: access is blacklisted; refresh is
        removed from Redis.'
      parameters:
      - description: Tokens to revoke
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.LogoutRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Logout and revoke tokens
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Exchanges a valid refresh token for a new access+refresh pair
      parameters:
      - description: Refresh token payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.RefreshResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Rotate tokens using a valid refresh token
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Creates a new user account and returns an access+refresh token
        pair
      parameters:
      - description: User registration data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "422":
          description: Unprocessable Entity
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /auth/token:
    post:
      consumes:
      - application/json
      description: Issue access token for client credentials grant
      parameters:
      - description: Client credentials payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.ClientTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ClientTokenResponse'
        "400":
          description: Invalid payload
          schema:
            type: string
        "401":
          description: Invalid client credentials
          schema:
            type: string
        "422":
          description: Validation failed
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Client Token
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
